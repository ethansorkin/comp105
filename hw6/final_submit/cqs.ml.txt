 1. Read section 5.1 of [Harper](http://www.cs.cmu.edu/~rwh/isml/book.pdf) 
    about tuple types and tuple patterns.  Also look at the list
    examples in sections 9.1 and 9.2 of Harper.

    Now consider the pattern `(x::y::zs, w)`. For each of the following
    expressions, tell whether the pattern matches the value denoted. If
    the pattern matches, say what values are bound to the four variables
    `x`, `y`, `zs`, and `w`. If it does not match, explain why not.

    (a) `([1, 2, 3], ("COMP", 105))`
    (b) `(("COMP", 105), [1, 2, 3])`
    (c) `([("COMP", 105)], (1, 2, 3))`
    (d) `(["COMP", "105"], true)`
    (e) `([true, false], 2.718281828)`

    Answers here:

    (a) x = 1, y = 2, zs = [3], w = ("COMP", 105)

    (b) This expression does not match the pattern because x::y::zs returns a
    list, but ("COMP", 105) is a tuple, not a list.

    (c) This expression does not match the pattern because a singleton list
    cannot possibly have the form x::y::zs. The smallest list this pattern could
    have has 2 elements, where zs = nil, so the resulting list is [x, y].

    (d) x = "COMP", y = "105", zs = nil, w = true

    (e) x = true, y = false, zs = nil, w = 2.718281828


    _You are starting to be ready to use pattern matching._


 2. Read the descriptions of patterns and example values (steps 3 and 2)
    in the handout "[Program Design with ML Types and Pattern 
    Matching](../handouts/mlproofs.pdf)."  In the same handout, look
    at Table 1, including the *Types of parts* column.  Using the
    ideas you find there, prepare to answer questions about this expression:
    
        case f (x, y, z) 
          of []      => raise Empty
           | w :: ws => if p w then SOME w else NONE

    You are told that the subexpression `f (x, y, z)` has type
    `'a list`.  Using that information, give the type of each of these
    code fragments, which are built from parts of patterns: 

    (a) The type of the pattern `w :: ws`

        → 'a list

    (b) The type of the variable `ws`

        → 'a list

    (c) The type of the expression `SOME w`

        → 'a

    _You are ready to use pattern matching on common ML types._



 3. Read the section on unit testing in the [guide to learning
    ML](../readings/ml.pdf).  Read about infix function names in
    step 3 of the "design steps" section of the handout ["Program
    Design with ML Types and Pattern Matching"](../handouts/mlproofs.pdf).
    And read the section on [unit testing](#unit-testing) in this homework.

    Now, using the interpreter to be sure your answer is well typed,
    translate the following _failing_ unit test into ML:
    
        (check-expect (foldl + 0 '(1 2 3)) 7)
    
    Your translation:

    → val () =
        Unit.checkExpectWith Int.toString "sum is 7"
        (fn () => foldl op + 0 [1, 2, 3])
        7

    _You are ready to write unit tests._


 4. In chapter 5 of *Programming Languages: Build, Prove, and Compare*, the 
   `eval` code for applying a function appears in code chunk 371d.
    In evaluating `APPLY (f, args)`, if expression `f` does not
    evaluate to either a primitive function or a closure, the code
    raises the `RuntimeError` exception. 

    (a) Show a piece of μScheme code that would, when evaluated, cause
        chunk 371d to raise the `RuntimeError` exception.
        **We are asking for μScheme code that the interpreter runs,
        not for ML code.**

        → (equal? '(1 2 3) '(1 2 4)) or #f ?????????????????

    (b) When exception `RuntimeError` is raised, what happens from the
        user's point of view?  That is, if a person is interacting
        with the μScheme interpreter at the read/eval/print loop, and
        evaluating an expression raises the `RuntimeError` exception,
        what user-visible actions will the interpreter take?


        This message will print:
        Run-time error: Applied non-function #f


    _You are ready to write `zip` and to write environment
    functions that use exceptions._


 5. "Free" variables are those that are not bound to a value in the
    current scope. You can find a longer discussion and precise
    definition in section 5.11 of *Build, Prove, and Compare*, 
    which starts on page 382. Read the section and identify the
    free variables of the expressions below.  *Remember that a name
    occurring in function position can be a free variable.*

     (a) Free variables of `(lambda (x) (lambda (y) (equal? x y)))`

         → Free variables: equal?

     (b) Free variables of `(lambda (y) (equal? x y))`

         → Free variables: equal?, x

     (c) Free variables of

             (lambda (s1 s2)
               (if (or (atom? s1) (atom? s2))
                 (= s1 s2)
                 (and (equal? (car s1) (car s2))
                      (equal? (cdr s1) (cdr s2)))))

         → Free variables: or, atom?, =, and, equal?, car, cdr

    _You are ready to improve the μScheme interpreter._ You may do
    this with a partner.  You and your partner will turn your answers
    to parts (a) and (b) into unit tests.
